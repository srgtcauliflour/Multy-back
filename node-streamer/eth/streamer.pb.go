// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamer.proto

package eth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Multisig struct {
	Confirmations        int64    `protobuf:"varint,1,opt,name=Confirmations" json:"Confirmations,omitempty"`
	FactoryAddress       string   `protobuf:"bytes,2,opt,name=FactoryAddress" json:"FactoryAddress,omitempty"`
	TxOfCreation         string   `protobuf:"bytes,3,opt,name=TxOfCreation" json:"TxOfCreation,omitempty"`
	Contract             string   `protobuf:"bytes,4,opt,name=Contract" json:"Contract,omitempty"`
	DeployStatus         bool     `protobuf:"varint,5,opt,name=DeployStatus" json:"DeployStatus,omitempty"`
	Addresses            []string `protobuf:"bytes,6,rep,name=Addresses" json:"Addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Multisig) Reset()         { *m = Multisig{} }
func (m *Multisig) String() string { return proto.CompactTextString(m) }
func (*Multisig) ProtoMessage()    {}
func (*Multisig) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{0}
}
func (m *Multisig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Multisig.Unmarshal(m, b)
}
func (m *Multisig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Multisig.Marshal(b, m, deterministic)
}
func (dst *Multisig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Multisig.Merge(dst, src)
}
func (m *Multisig) XXX_Size() int {
	return xxx_messageInfo_Multisig.Size(m)
}
func (m *Multisig) XXX_DiscardUnknown() {
	xxx_messageInfo_Multisig.DiscardUnknown(m)
}

var xxx_messageInfo_Multisig proto.InternalMessageInfo

func (m *Multisig) GetConfirmations() int64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *Multisig) GetFactoryAddress() string {
	if m != nil {
		return m.FactoryAddress
	}
	return ""
}

func (m *Multisig) GetTxOfCreation() string {
	if m != nil {
		return m.TxOfCreation
	}
	return ""
}

func (m *Multisig) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Multisig) GetDeployStatus() bool {
	if m != nil {
		return m.DeployStatus
	}
	return false
}

func (m *Multisig) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Balance struct {
	Balance              string   `protobuf:"bytes,1,opt,name=Balance" json:"Balance,omitempty"`
	PendingBalance       string   `protobuf:"bytes,2,opt,name=PendingBalance" json:"PendingBalance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{1}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *Balance) GetPendingBalance() string {
	if m != nil {
		return m.PendingBalance
	}
	return ""
}

type Nonce struct {
	Nonce                int64    `protobuf:"varint,1,opt,name=Nonce" json:"Nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{2}
}
func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nonce.Unmarshal(m, b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
}
func (dst *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(dst, src)
}
func (m *Nonce) XXX_Size() int {
	return xxx_messageInfo_Nonce.Size(m)
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type GasPrice struct {
	Gas                  string   `protobuf:"bytes,1,opt,name=Gas" json:"Gas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GasPrice) Reset()         { *m = GasPrice{} }
func (m *GasPrice) String() string { return proto.CompactTextString(m) }
func (*GasPrice) ProtoMessage()    {}
func (*GasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{3}
}
func (m *GasPrice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GasPrice.Unmarshal(m, b)
}
func (m *GasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GasPrice.Marshal(b, m, deterministic)
}
func (dst *GasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPrice.Merge(dst, src)
}
func (m *GasPrice) XXX_Size() int {
	return xxx_messageInfo_GasPrice.Size(m)
}
func (m *GasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_GasPrice proto.InternalMessageInfo

func (m *GasPrice) GetGas() string {
	if m != nil {
		return m.Gas
	}
	return ""
}

type ETHTransaction struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex          int32    `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex         int32    `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=Hash" json:"Hash,omitempty"`
	From                 string   `protobuf:"bytes,5,opt,name=From" json:"From,omitempty"`
	To                   string   `protobuf:"bytes,6,opt,name=To" json:"To,omitempty"`
	Amount               string   `protobuf:"bytes,7,opt,name=Amount" json:"Amount,omitempty"`
	Input                string   `protobuf:"bytes,8,opt,name=input" json:"input,omitempty"`
	GasPrice             int64    `protobuf:"varint,9,opt,name=GasPrice" json:"GasPrice,omitempty"`
	GasLimit             int64    `protobuf:"varint,10,opt,name=GasLimit" json:"GasLimit,omitempty"`
	Nonce                int32    `protobuf:"varint,11,opt,name=Nonce" json:"Nonce,omitempty"`
	Status               int32    `protobuf:"varint,12,opt,name=Status" json:"Status,omitempty"`
	BlockTime            int64    `protobuf:"varint,13,opt,name=BlockTime" json:"BlockTime,omitempty"`
	TxpoolTime           int64    `protobuf:"varint,14,opt,name=TxpoolTime" json:"TxpoolTime,omitempty"`
	BlockHeight          int64    `protobuf:"varint,15,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
	Resync               bool     `protobuf:"varint,16,opt,name=Resync" json:"Resync,omitempty"`
	Multisig             bool     `protobuf:"varint,17,opt,name=Multisig" json:"Multisig,omitempty"`
	Contract             string   `protobuf:"bytes,18,opt,name=Contract" json:"Contract,omitempty"`
	MethodInvoked        string   `protobuf:"bytes,19,opt,name=MethodInvoked" json:"MethodInvoked,omitempty"`
	Return               string   `protobuf:"bytes,20,opt,name=return" json:"return,omitempty"`
	InvocationStatus     bool     `protobuf:"varint,21,opt,name=InvocationStatus" json:"InvocationStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ETHTransaction) Reset()         { *m = ETHTransaction{} }
func (m *ETHTransaction) String() string { return proto.CompactTextString(m) }
func (*ETHTransaction) ProtoMessage()    {}
func (*ETHTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{4}
}
func (m *ETHTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ETHTransaction.Unmarshal(m, b)
}
func (m *ETHTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ETHTransaction.Marshal(b, m, deterministic)
}
func (dst *ETHTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHTransaction.Merge(dst, src)
}
func (m *ETHTransaction) XXX_Size() int {
	return xxx_messageInfo_ETHTransaction.Size(m)
}
func (m *ETHTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ETHTransaction proto.InternalMessageInfo

func (m *ETHTransaction) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ETHTransaction) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *ETHTransaction) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

func (m *ETHTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ETHTransaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ETHTransaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ETHTransaction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *ETHTransaction) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ETHTransaction) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ETHTransaction) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ETHTransaction) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ETHTransaction) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ETHTransaction) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *ETHTransaction) GetTxpoolTime() int64 {
	if m != nil {
		return m.TxpoolTime
	}
	return 0
}

func (m *ETHTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ETHTransaction) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

func (m *ETHTransaction) GetMultisig() bool {
	if m != nil {
		return m.Multisig
	}
	return false
}

func (m *ETHTransaction) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ETHTransaction) GetMethodInvoked() string {
	if m != nil {
		return m.MethodInvoked
	}
	return ""
}

func (m *ETHTransaction) GetReturn() string {
	if m != nil {
		return m.Return
	}
	return ""
}

func (m *ETHTransaction) GetInvocationStatus() bool {
	if m != nil {
		return m.InvocationStatus
	}
	return false
}

type BlockHeight struct {
	Height               int64    `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeight) Reset()         { *m = BlockHeight{} }
func (m *BlockHeight) String() string { return proto.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()    {}
func (*BlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{5}
}
func (m *BlockHeight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeight.Unmarshal(m, b)
}
func (m *BlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeight.Marshal(b, m, deterministic)
}
func (dst *BlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeight.Merge(dst, src)
}
func (m *BlockHeight) XXX_Size() int {
	return xxx_messageInfo_BlockHeight.Size(m)
}
func (m *BlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeight proto.InternalMessageInfo

func (m *BlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MempoolToDelete struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MempoolToDelete) Reset()         { *m = MempoolToDelete{} }
func (m *MempoolToDelete) String() string { return proto.CompactTextString(m) }
func (*MempoolToDelete) ProtoMessage()    {}
func (*MempoolToDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{6}
}
func (m *MempoolToDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MempoolToDelete.Unmarshal(m, b)
}
func (m *MempoolToDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MempoolToDelete.Marshal(b, m, deterministic)
}
func (dst *MempoolToDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MempoolToDelete.Merge(dst, src)
}
func (m *MempoolToDelete) XXX_Size() int {
	return xxx_messageInfo_MempoolToDelete.Size(m)
}
func (m *MempoolToDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_MempoolToDelete.DiscardUnknown(m)
}

var xxx_messageInfo_MempoolToDelete proto.InternalMessageInfo

func (m *MempoolToDelete) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type WatchAddress struct {
	Address              string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	WalletIndex          int32    `protobuf:"varint,3,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex         int32    `protobuf:"varint,4,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchAddress) Reset()         { *m = WatchAddress{} }
func (m *WatchAddress) String() string { return proto.CompactTextString(m) }
func (*WatchAddress) ProtoMessage()    {}
func (*WatchAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{7}
}
func (m *WatchAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchAddress.Unmarshal(m, b)
}
func (m *WatchAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchAddress.Marshal(b, m, deterministic)
}
func (dst *WatchAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchAddress.Merge(dst, src)
}
func (m *WatchAddress) XXX_Size() int {
	return xxx_messageInfo_WatchAddress.Size(m)
}
func (m *WatchAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WatchAddress proto.InternalMessageInfo

func (m *WatchAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *WatchAddress) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *WatchAddress) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type MempoolRecord struct {
	Category             int32    `protobuf:"varint,1,opt,name=category" json:"category,omitempty"`
	HashTX               string   `protobuf:"bytes,2,opt,name=hashTX" json:"hashTX,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MempoolRecord) Reset()         { *m = MempoolRecord{} }
func (m *MempoolRecord) String() string { return proto.CompactTextString(m) }
func (*MempoolRecord) ProtoMessage()    {}
func (*MempoolRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{8}
}
func (m *MempoolRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MempoolRecord.Unmarshal(m, b)
}
func (m *MempoolRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MempoolRecord.Marshal(b, m, deterministic)
}
func (dst *MempoolRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MempoolRecord.Merge(dst, src)
}
func (m *MempoolRecord) XXX_Size() int {
	return xxx_messageInfo_MempoolRecord.Size(m)
}
func (m *MempoolRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MempoolRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MempoolRecord proto.InternalMessageInfo

func (m *MempoolRecord) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *MempoolRecord) GetHashTX() string {
	if m != nil {
		return m.HashTX
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{9}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type RawTx struct {
	Transaction          string   `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTx) Reset()         { *m = RawTx{} }
func (m *RawTx) String() string { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()    {}
func (*RawTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{10}
}
func (m *RawTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTx.Unmarshal(m, b)
}
func (m *RawTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTx.Marshal(b, m, deterministic)
}
func (dst *RawTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTx.Merge(dst, src)
}
func (m *RawTx) XXX_Size() int {
	return xxx_messageInfo_RawTx.Size(m)
}
func (m *RawTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTx.DiscardUnknown(m)
}

var xxx_messageInfo_RawTx proto.InternalMessageInfo

func (m *RawTx) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

type AddressToResync struct {
	Address              string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressToResync) Reset()         { *m = AddressToResync{} }
func (m *AddressToResync) String() string { return proto.CompactTextString(m) }
func (*AddressToResync) ProtoMessage()    {}
func (*AddressToResync) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{11}
}
func (m *AddressToResync) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressToResync.Unmarshal(m, b)
}
func (m *AddressToResync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressToResync.Marshal(b, m, deterministic)
}
func (dst *AddressToResync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressToResync.Merge(dst, src)
}
func (m *AddressToResync) XXX_Size() int {
	return xxx_messageInfo_AddressToResync.Size(m)
}
func (m *AddressToResync) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressToResync.DiscardUnknown(m)
}

var xxx_messageInfo_AddressToResync proto.InternalMessageInfo

func (m *AddressToResync) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UsersData struct {
	Map                  map[string]*AddressExtended `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UsersContracts       map[string]string           `protobuf:"bytes,2,rep,name=UsersContracts" json:"UsersContracts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UsersData) Reset()         { *m = UsersData{} }
func (m *UsersData) String() string { return proto.CompactTextString(m) }
func (*UsersData) ProtoMessage()    {}
func (*UsersData) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{12}
}
func (m *UsersData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersData.Unmarshal(m, b)
}
func (m *UsersData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersData.Marshal(b, m, deterministic)
}
func (dst *UsersData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersData.Merge(dst, src)
}
func (m *UsersData) XXX_Size() int {
	return xxx_messageInfo_UsersData.Size(m)
}
func (m *UsersData) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersData.DiscardUnknown(m)
}

var xxx_messageInfo_UsersData proto.InternalMessageInfo

func (m *UsersData) GetMap() map[string]*AddressExtended {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *UsersData) GetUsersContracts() map[string]string {
	if m != nil {
		return m.UsersContracts
	}
	return nil
}

type AddressExtended struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex          int32    `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex         int32    `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressExtended) Reset()         { *m = AddressExtended{} }
func (m *AddressExtended) String() string { return proto.CompactTextString(m) }
func (*AddressExtended) ProtoMessage()    {}
func (*AddressExtended) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{13}
}
func (m *AddressExtended) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressExtended.Unmarshal(m, b)
}
func (m *AddressExtended) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressExtended.Marshal(b, m, deterministic)
}
func (dst *AddressExtended) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressExtended.Merge(dst, src)
}
func (m *AddressExtended) XXX_Size() int {
	return xxx_messageInfo_AddressExtended.Size(m)
}
func (m *AddressExtended) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressExtended.DiscardUnknown(m)
}

var xxx_messageInfo_AddressExtended proto.InternalMessageInfo

func (m *AddressExtended) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressExtended) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressExtended) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type ReplyInfo struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyInfo) Reset()         { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string { return proto.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()    {}
func (*ReplyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{14}
}
func (m *ReplyInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyInfo.Unmarshal(m, b)
}
func (m *ReplyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyInfo.Marshal(b, m, deterministic)
}
func (dst *ReplyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyInfo.Merge(dst, src)
}
func (m *ReplyInfo) XXX_Size() int {
	return xxx_messageInfo_ReplyInfo.Size(m)
}
func (m *ReplyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyInfo proto.InternalMessageInfo

func (m *ReplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ServiceVersion struct {
	Branch               string   `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Commit               string   `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Buildtime            string   `protobuf:"bytes,3,opt,name=buildtime" json:"buildtime,omitempty"`
	Lasttag              string   `protobuf:"bytes,4,opt,name=lasttag" json:"lasttag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceVersion) Reset()         { *m = ServiceVersion{} }
func (m *ServiceVersion) String() string { return proto.CompactTextString(m) }
func (*ServiceVersion) ProtoMessage()    {}
func (*ServiceVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_9aaaac3eb8257052, []int{15}
}
func (m *ServiceVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceVersion.Unmarshal(m, b)
}
func (m *ServiceVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceVersion.Marshal(b, m, deterministic)
}
func (dst *ServiceVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceVersion.Merge(dst, src)
}
func (m *ServiceVersion) XXX_Size() int {
	return xxx_messageInfo_ServiceVersion.Size(m)
}
func (m *ServiceVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceVersion proto.InternalMessageInfo

func (m *ServiceVersion) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ServiceVersion) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *ServiceVersion) GetBuildtime() string {
	if m != nil {
		return m.Buildtime
	}
	return ""
}

func (m *ServiceVersion) GetLasttag() string {
	if m != nil {
		return m.Lasttag
	}
	return ""
}

func init() {
	proto.RegisterType((*Multisig)(nil), "eth.Multisig")
	proto.RegisterType((*Balance)(nil), "eth.Balance")
	proto.RegisterType((*Nonce)(nil), "eth.Nonce")
	proto.RegisterType((*GasPrice)(nil), "eth.GasPrice")
	proto.RegisterType((*ETHTransaction)(nil), "eth.ETHTransaction")
	proto.RegisterType((*BlockHeight)(nil), "eth.BlockHeight")
	proto.RegisterType((*MempoolToDelete)(nil), "eth.MempoolToDelete")
	proto.RegisterType((*WatchAddress)(nil), "eth.WatchAddress")
	proto.RegisterType((*MempoolRecord)(nil), "eth.MempoolRecord")
	proto.RegisterType((*Empty)(nil), "eth.Empty")
	proto.RegisterType((*RawTx)(nil), "eth.RawTx")
	proto.RegisterType((*AddressToResync)(nil), "eth.AddressToResync")
	proto.RegisterType((*UsersData)(nil), "eth.UsersData")
	proto.RegisterMapType((map[string]*AddressExtended)(nil), "eth.UsersData.MapEntry")
	proto.RegisterMapType((map[string]string)(nil), "eth.UsersData.UsersContractsEntry")
	proto.RegisterType((*AddressExtended)(nil), "eth.AddressExtended")
	proto.RegisterType((*ReplyInfo)(nil), "eth.ReplyInfo")
	proto.RegisterType((*ServiceVersion)(nil), "eth.ServiceVersion")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeCommuunications service

type NodeCommuunicationsClient interface {
	ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error)
	EventGetGasPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GasPrice, error)
	EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error)
	EventGetAdressNonce(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Nonce, error)
	EventGetAdressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error)
	EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error)
	EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error)
	EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error)
	EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventNewBlockClient, error)
	EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error)
	NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error)
	SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error)
	//  Multisig methods
	AddMultisig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_AddMultisigClient, error)
}

type nodeCommuunicationsClient struct {
	cc *grpc.ClientConn
}

func NewNodeCommuunicationsClient(cc *grpc.ClientConn) NodeCommuunicationsClient {
	return &nodeCommuunicationsClient{cc}
}

func (c *nodeCommuunicationsClient) ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error) {
	out := new(ServiceVersion)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/ServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetGasPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GasPrice, error) {
	out := new(GasPrice)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetGasPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventInitialAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventAddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetBlockHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAdressNonce(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetAdressNonce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAdressBalance(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventGetAdressBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[0], c.cc, "/eth.NodeCommuunications/EventGetAllMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventGetAllMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventGetAllMempoolClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventGetAllMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventGetAllMempoolClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[1], c.cc, "/eth.NodeCommuunications/EventAddMempoolRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventAddMempoolRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventAddMempoolRecordClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventAddMempoolRecordClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[2], c.cc, "/eth.NodeCommuunications/EventDeleteMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventDeleteMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventDeleteMempoolClient interface {
	Recv() (*MempoolToDelete, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventDeleteMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventDeleteMempoolClient) Recv() (*MempoolToDelete, error) {
	m := new(MempoolToDelete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventResyncAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventNewBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[3], c.cc, "/eth.NodeCommuunications/EventNewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventNewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventNewBlockClient interface {
	Recv() (*BlockHeight, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventNewBlockClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventNewBlockClient) Recv() (*BlockHeight, error) {
	m := new(BlockHeight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/EventSendRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[4], c.cc, "/eth.NodeCommuunications/NewTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsNewTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_NewTxClient interface {
	Recv() (*ETHTransaction, error)
	grpc.ClientStream
}

type nodeCommuunicationsNewTxClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsNewTxClient) Recv() (*ETHTransaction, error) {
	m := new(ETHTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/eth.NodeCommuunications/SyncState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) AddMultisig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_AddMultisigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[5], c.cc, "/eth.NodeCommuunications/AddMultisig", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsAddMultisigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_AddMultisigClient interface {
	Recv() (*Multisig, error)
	grpc.ClientStream
}

type nodeCommuunicationsAddMultisigClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsAddMultisigClient) Recv() (*Multisig, error) {
	m := new(Multisig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeCommuunications service

type NodeCommuunicationsServer interface {
	ServiceInfo(context.Context, *Empty) (*ServiceVersion, error)
	EventGetGasPrice(context.Context, *Empty) (*GasPrice, error)
	EventInitialAdd(context.Context, *UsersData) (*ReplyInfo, error)
	EventAddNewAddress(context.Context, *WatchAddress) (*ReplyInfo, error)
	EventGetBlockHeight(context.Context, *Empty) (*BlockHeight, error)
	EventGetAdressNonce(context.Context, *AddressToResync) (*Nonce, error)
	EventGetAdressBalance(context.Context, *AddressToResync) (*Balance, error)
	EventGetAllMempool(*Empty, NodeCommuunications_EventGetAllMempoolServer) error
	EventAddMempoolRecord(*Empty, NodeCommuunications_EventAddMempoolRecordServer) error
	EventDeleteMempool(*Empty, NodeCommuunications_EventDeleteMempoolServer) error
	EventResyncAddress(context.Context, *AddressToResync) (*ReplyInfo, error)
	EventNewBlock(*Empty, NodeCommuunications_EventNewBlockServer) error
	EventSendRawTx(context.Context, *RawTx) (*ReplyInfo, error)
	NewTx(*Empty, NodeCommuunications_NewTxServer) error
	SyncState(context.Context, *BlockHeight) (*ReplyInfo, error)
	//  Multisig methods
	AddMultisig(*Empty, NodeCommuunications_AddMultisigServer) error
}

func RegisterNodeCommuunicationsServer(s *grpc.Server, srv NodeCommuunicationsServer) {
	s.RegisterService(&_NodeCommuunications_serviceDesc, srv)
}

func _NodeCommuunications_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).ServiceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetGasPrice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventInitialAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventInitialAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventAddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventAddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAdressNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetAdressNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetAdressNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetAdressNonce(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAdressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetAdressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventGetAdressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetAdressBalance(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAllMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventGetAllMempool(m, &nodeCommuunicationsEventGetAllMempoolServer{stream})
}

type NodeCommuunications_EventGetAllMempoolServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventGetAllMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventGetAllMempoolServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventAddMempoolRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventAddMempoolRecord(m, &nodeCommuunicationsEventAddMempoolRecordServer{stream})
}

type NodeCommuunications_EventAddMempoolRecordServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventAddMempoolRecordServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventDeleteMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventDeleteMempool(m, &nodeCommuunicationsEventDeleteMempoolServer{stream})
}

type NodeCommuunications_EventDeleteMempoolServer interface {
	Send(*MempoolToDelete) error
	grpc.ServerStream
}

type nodeCommuunicationsEventDeleteMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventDeleteMempoolServer) Send(m *MempoolToDelete) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventResyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventResyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventNewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventNewBlock(m, &nodeCommuunicationsEventNewBlockServer{stream})
}

type NodeCommuunications_EventNewBlockServer interface {
	Send(*BlockHeight) error
	grpc.ServerStream
}

type nodeCommuunicationsEventNewBlockServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventNewBlockServer) Send(m *BlockHeight) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventSendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/EventSendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, req.(*RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_NewTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).NewTx(m, &nodeCommuunicationsNewTxServer{stream})
}

type NodeCommuunications_NewTxServer interface {
	Send(*ETHTransaction) error
	grpc.ServerStream
}

type nodeCommuunicationsNewTxServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsNewTxServer) Send(m *ETHTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.NodeCommuunications/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).SyncState(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_AddMultisig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).AddMultisig(m, &nodeCommuunicationsAddMultisigServer{stream})
}

type NodeCommuunications_AddMultisigServer interface {
	Send(*Multisig) error
	grpc.ServerStream
}

type nodeCommuunicationsAddMultisigServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsAddMultisigServer) Send(m *Multisig) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeCommuunications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eth.NodeCommuunications",
	HandlerType: (*NodeCommuunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _NodeCommuunications_ServiceInfo_Handler,
		},
		{
			MethodName: "EventGetGasPrice",
			Handler:    _NodeCommuunications_EventGetGasPrice_Handler,
		},
		{
			MethodName: "EventInitialAdd",
			Handler:    _NodeCommuunications_EventInitialAdd_Handler,
		},
		{
			MethodName: "EventAddNewAddress",
			Handler:    _NodeCommuunications_EventAddNewAddress_Handler,
		},
		{
			MethodName: "EventGetBlockHeight",
			Handler:    _NodeCommuunications_EventGetBlockHeight_Handler,
		},
		{
			MethodName: "EventGetAdressNonce",
			Handler:    _NodeCommuunications_EventGetAdressNonce_Handler,
		},
		{
			MethodName: "EventGetAdressBalance",
			Handler:    _NodeCommuunications_EventGetAdressBalance_Handler,
		},
		{
			MethodName: "EventResyncAddress",
			Handler:    _NodeCommuunications_EventResyncAddress_Handler,
		},
		{
			MethodName: "EventSendRawTx",
			Handler:    _NodeCommuunications_EventSendRawTx_Handler,
		},
		{
			MethodName: "SyncState",
			Handler:    _NodeCommuunications_SyncState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventGetAllMempool",
			Handler:       _NodeCommuunications_EventGetAllMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventAddMempoolRecord",
			Handler:       _NodeCommuunications_EventAddMempoolRecord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventDeleteMempool",
			Handler:       _NodeCommuunications_EventDeleteMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventNewBlock",
			Handler:       _NodeCommuunications_EventNewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewTx",
			Handler:       _NodeCommuunications_NewTx_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddMultisig",
			Handler:       _NodeCommuunications_AddMultisig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamer.proto",
}

func init() { proto.RegisterFile("streamer.proto", fileDescriptor_streamer_9aaaac3eb8257052) }

var fileDescriptor_streamer_9aaaac3eb8257052 = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x52, 0xdb, 0x46,
	0x14, 0xb6, 0x31, 0x36, 0xf6, 0x31, 0x18, 0xb2, 0x90, 0x54, 0xe3, 0x49, 0x3b, 0x1e, 0x4d, 0x92,
	0x21, 0x69, 0x87, 0x50, 0x32, 0x9d, 0x49, 0xd3, 0xf6, 0xc2, 0x01, 0x02, 0xb4, 0x81, 0x66, 0x84,
	0xdb, 0xf4, 0x76, 0x91, 0x0e, 0xb6, 0x06, 0x69, 0xd7, 0x23, 0xad, 0xc1, 0x7e, 0x81, 0xbe, 0x40,
	0x5f, 0xad, 0x57, 0x7d, 0x94, 0x5e, 0x75, 0xf6, 0xec, 0x4a, 0x96, 0x8c, 0x3b, 0xe9, 0x4d, 0xef,
	0xce, 0xff, 0xdf, 0x9e, 0xf3, 0x49, 0xd0, 0x49, 0x55, 0x82, 0x3c, 0xc6, 0x64, 0x6f, 0x9c, 0x48,
	0x25, 0x59, 0x0d, 0xd5, 0xc8, 0xfd, 0xab, 0x0a, 0xcd, 0xf3, 0x49, 0xa4, 0xc2, 0x34, 0x1c, 0xb2,
	0x27, 0xb0, 0x71, 0x28, 0xc5, 0x75, 0x98, 0xc4, 0x5c, 0x85, 0x52, 0xa4, 0x4e, 0xb5, 0x57, 0xdd,
	0xad, 0x79, 0x65, 0x21, 0x7b, 0x06, 0x9d, 0x77, 0xdc, 0x57, 0x32, 0x99, 0xf5, 0x83, 0x20, 0xc1,
	0x34, 0x75, 0x56, 0x7a, 0xd5, 0xdd, 0x96, 0xb7, 0x20, 0x65, 0x2e, 0xac, 0x0f, 0xa6, 0x3f, 0x5f,
	0x1f, 0x26, 0x48, 0x8e, 0x4e, 0x8d, 0xac, 0x4a, 0x32, 0xd6, 0x85, 0xe6, 0xa1, 0x14, 0x2a, 0xe1,
	0xbe, 0x72, 0x56, 0x49, 0x9f, 0xf3, 0xda, 0xff, 0x08, 0xc7, 0x91, 0x9c, 0x5d, 0x2a, 0xae, 0x26,
	0xa9, 0x53, 0xef, 0x55, 0x77, 0x9b, 0x5e, 0x49, 0xc6, 0x1e, 0x43, 0xcb, 0xa6, 0xc3, 0xd4, 0x69,
	0xf4, 0x6a, 0xbb, 0x2d, 0x6f, 0x2e, 0x70, 0x7f, 0x82, 0xb5, 0xb7, 0x3c, 0xe2, 0xc2, 0x47, 0xe6,
	0xe4, 0x24, 0x35, 0xd5, 0xf2, 0x72, 0xcd, 0x33, 0xe8, 0x7c, 0x40, 0x11, 0x84, 0x62, 0x98, 0x19,
	0xd8, 0x76, 0xca, 0x52, 0xf7, 0x73, 0xa8, 0x5f, 0x48, 0xed, 0xb0, 0x63, 0x09, 0x3b, 0x1d, 0xc3,
	0xb8, 0x8f, 0xa1, 0x79, 0xc2, 0xd3, 0x0f, 0x49, 0xe8, 0x23, 0xdb, 0x82, 0xda, 0x09, 0x4f, 0x6d,
	0x22, 0x4d, 0xba, 0x7f, 0xae, 0x42, 0xe7, 0x78, 0x70, 0x3a, 0x48, 0xb8, 0x48, 0xb9, 0x4f, 0xad,
	0x3f, 0x82, 0xc6, 0x2f, 0x29, 0x26, 0x67, 0x47, 0xd6, 0xce, 0x72, 0xac, 0x07, 0xed, 0x8f, 0x3c,
	0x8a, 0x50, 0x9d, 0x89, 0x00, 0xa7, 0x54, 0x4c, 0xdd, 0x2b, 0x8a, 0xf4, 0x60, 0x6c, 0x8f, 0xc6,
	0xa4, 0x46, 0x26, 0x25, 0x19, 0x63, 0xb0, 0x7a, 0xca, 0xd3, 0x91, 0x1d, 0x2a, 0xd1, 0x5a, 0xf6,
	0x2e, 0x91, 0x31, 0x0d, 0xb2, 0xe5, 0x11, 0xcd, 0x3a, 0xb0, 0x32, 0x90, 0x4e, 0x83, 0x24, 0x2b,
	0x03, 0xa9, 0xab, 0xea, 0xc7, 0x72, 0x22, 0x94, 0xb3, 0x66, 0xaa, 0x32, 0x9c, 0x6e, 0x3a, 0x14,
	0xe3, 0x89, 0x72, 0x9a, 0x24, 0x36, 0x8c, 0x7e, 0xbe, 0xac, 0x69, 0xa7, 0x45, 0xd3, 0x98, 0x0f,
	0xc1, 0xe8, 0xde, 0x87, 0x71, 0xa8, 0x1c, 0xc8, 0x75, 0xc4, 0xcf, 0x47, 0xd8, 0xa6, 0xd2, 0xed,
	0x60, 0x1f, 0x41, 0xc3, 0x3e, 0xf5, 0x3a, 0x89, 0x1b, 0xf3, 0x47, 0x7e, 0x1b, 0x49, 0xff, 0x66,
	0x10, 0xc6, 0xe8, 0x6c, 0x50, 0xa8, 0xb9, 0x80, 0x7d, 0x01, 0x30, 0x98, 0x8e, 0xa5, 0x8c, 0x48,
	0xdd, 0x21, 0x75, 0x41, 0xa2, 0xe7, 0x49, 0xc6, 0xa7, 0x18, 0x0e, 0x47, 0xca, 0xd9, 0x24, 0x83,
	0xa2, 0x48, 0xe7, 0xf5, 0x30, 0x9d, 0x09, 0xdf, 0xd9, 0xa2, 0x15, 0xb3, 0x9c, 0xee, 0x20, 0x3b,
	0x0d, 0xe7, 0x01, 0x69, 0xe6, 0xa7, 0x52, 0x5c, 0x5c, 0xb6, 0xb0, 0xb8, 0x4f, 0x60, 0xe3, 0x1c,
	0xd5, 0x48, 0x06, 0x67, 0xe2, 0x56, 0xde, 0x60, 0xe0, 0x6c, 0x93, 0x41, 0x59, 0xa8, 0xb3, 0x26,
	0xa8, 0x26, 0x89, 0x70, 0x76, 0xcc, 0xa4, 0x0d, 0xc7, 0x5e, 0xc0, 0x96, 0x36, 0xf1, 0xe9, 0x40,
	0xec, 0x3c, 0x1e, 0x52, 0xf6, 0x7b, 0x72, 0xf7, 0x29, 0x2c, 0x36, 0x32, 0x32, 0x5d, 0x9a, 0xd5,
	0xb4, 0x9c, 0xfb, 0x14, 0x36, 0xcf, 0x31, 0xa6, 0x89, 0xc8, 0x23, 0x8c, 0x50, 0xa1, 0xde, 0x85,
	0x91, 0xde, 0x0f, 0xb3, 0x7b, 0x44, 0xbb, 0xbf, 0x57, 0x61, 0xfd, 0x23, 0x57, 0xfe, 0x28, 0xbb,
	0x60, 0x07, 0xd6, 0xb8, 0x3d, 0x71, 0x7b, 0x34, 0x96, 0xd5, 0x99, 0x26, 0x66, 0x79, 0xcd, 0xb1,
	0x58, 0x6e, 0x71, 0x79, 0x6b, 0x9f, 0x5e, 0xde, 0xd5, 0xfb, 0xcb, 0xeb, 0x1e, 0xea, 0x01, 0x52,
	0xbd, 0x1e, 0xfa, 0x32, 0x09, 0xf4, 0xb4, 0x7d, 0xae, 0x70, 0x28, 0x93, 0x19, 0x55, 0x52, 0xf7,
	0x72, 0x9e, 0x9a, 0xe6, 0xe9, 0x68, 0xf0, 0x5b, 0x56, 0x8a, 0xe1, 0xdc, 0x35, 0xa8, 0x1f, 0xc7,
	0x63, 0x35, 0x73, 0x9f, 0x43, 0xdd, 0xe3, 0x77, 0x83, 0xa9, 0x2e, 0x4e, 0xcd, 0x0f, 0xd0, 0xb6,
	0x54, 0x14, 0xb9, 0x5f, 0xc2, 0xa6, 0x2d, 0x64, 0x20, 0xed, 0x12, 0xfc, 0xeb, 0x0c, 0xdc, 0x3f,
	0x56, 0xa0, 0xa5, 0x6f, 0x36, 0x3d, 0xe2, 0x8a, 0xb3, 0xe7, 0x50, 0x8b, 0xf9, 0xd8, 0xa9, 0xf6,
	0x6a, 0xbb, 0xed, 0x83, 0xcf, 0xf6, 0x50, 0x8d, 0xf6, 0x72, 0xe5, 0xde, 0x39, 0x1f, 0x1f, 0x0b,
	0x95, 0xcc, 0x3c, 0x6d, 0xc3, 0x7e, 0x84, 0x0e, 0xa9, 0xb2, 0x85, 0xd1, 0x00, 0xaa, 0xbd, 0xdc,
	0x05, 0xaf, 0xb2, 0x91, 0x09, 0xb0, 0xe0, 0xd9, 0x7d, 0x0f, 0xcd, 0x2c, 0xb8, 0x86, 0x9d, 0x1b,
	0x9c, 0x65, 0xb0, 0x73, 0x83, 0x33, 0xf6, 0x02, 0xea, 0xb7, 0x3c, 0x9a, 0x18, 0x48, 0x6b, 0x1f,
	0xec, 0x50, 0x02, 0xdb, 0xe1, 0xf1, 0x54, 0xa1, 0x08, 0x30, 0xf0, 0x8c, 0xc9, 0x9b, 0x95, 0xd7,
	0xd5, 0x6e, 0x1f, 0xb6, 0x97, 0x24, 0x5d, 0x12, 0x78, 0xa7, 0x18, 0xb8, 0x55, 0x08, 0xe1, 0xca,
	0x7c, 0x84, 0x59, 0x82, 0xff, 0x17, 0xe9, 0xdc, 0xa7, 0xd0, 0xf2, 0x70, 0x1c, 0xcd, 0xce, 0xc4,
	0xb5, 0xd4, 0xaf, 0x15, 0x63, 0x9a, 0xf2, 0x61, 0x0e, 0xf3, 0x96, 0x75, 0xa7, 0xd0, 0xb9, 0xc4,
	0xe4, 0x36, 0xf4, 0xf1, 0x57, 0x4c, 0x52, 0x0b, 0xc0, 0x57, 0x09, 0x17, 0x7e, 0x76, 0x04, 0x96,
	0xd3, 0x72, 0x5f, 0xc6, 0x1a, 0xb6, 0xec, 0x42, 0x19, 0x4e, 0xc3, 0xd0, 0xd5, 0x24, 0x8c, 0x02,
	0xa5, 0x71, 0xc6, 0x7c, 0xcc, 0xe6, 0x02, 0x9d, 0x39, 0xe2, 0xa9, 0x52, 0x7c, 0x68, 0x31, 0x37,
	0x63, 0x0f, 0xfe, 0x6e, 0xc0, 0xf6, 0x85, 0x0c, 0xf0, 0x50, 0xc6, 0xf1, 0x64, 0x22, 0x42, 0xdf,
	0x7e, 0x47, 0xf7, 0xa1, 0x6d, 0x2b, 0xa2, 0xd2, 0x81, 0x1e, 0x87, 0x56, 0xb6, 0xbb, 0x4d, 0x74,
	0xb9, 0x5e, 0xb7, 0xc2, 0x5e, 0xc2, 0xd6, 0xf1, 0x2d, 0x0a, 0x75, 0x82, 0x2a, 0x87, 0xd9, 0xa2,
	0xdb, 0x06, 0xd1, 0x99, 0xca, 0xad, 0xb0, 0x57, 0xb0, 0x49, 0x0e, 0x67, 0x22, 0x54, 0x21, 0x8f,
	0xfa, 0x41, 0xc0, 0x3a, 0xe5, 0x25, 0xeb, 0x1a, 0x3e, 0x9f, 0xa0, 0x5b, 0x61, 0xdf, 0x02, 0x23,
	0xa7, 0x7e, 0x10, 0x5c, 0xe0, 0x5d, 0x86, 0x05, 0x0f, 0xc8, 0xae, 0x08, 0x0f, 0x4b, 0x5c, 0xbf,
	0x81, 0xed, 0xac, 0xc0, 0x22, 0x2e, 0x15, 0x6b, 0xdc, 0x22, 0xba, 0xa0, 0xa5, 0x8c, 0xb9, 0x5b,
	0x9f, 0x42, 0xdb, 0x0f, 0x6d, 0x71, 0x5d, 0xb3, 0x83, 0xec, 0x9a, 0x60, 0xe6, 0xa3, 0x5b, 0x61,
	0x3f, 0xc0, 0xc3, 0xb2, 0x6b, 0xf6, 0x59, 0x5f, 0xee, 0xbc, 0x6e, 0xb2, 0xdb, 0x4f, 0x7a, 0x85,
	0xbd, 0xb6, 0xbd, 0x6a, 0xf7, 0x28, 0xb2, 0xa0, 0x53, 0xaa, 0x97, 0x11, 0x5d, 0x82, 0x23, 0xb7,
	0xb2, 0x5f, 0x65, 0xdf, 0xd9, 0xc4, 0xfd, 0x20, 0x28, 0x63, 0xd5, 0x7f, 0x71, 0x7e, 0x63, 0xd3,
	0x1a, 0x30, 0x5e, 0x96, 0x76, 0xa7, 0xe8, 0x99, 0xa1, 0x36, 0xf9, 0x7e, 0x6f, 0x7d, 0x4d, 0x47,
	0xd9, 0xf3, 0x2c, 0x6f, 0xf7, 0xfe, 0x0b, 0x7d, 0x0d, 0x1b, 0xe4, 0x7d, 0x81, 0x77, 0xf4, 0x06,
	0x9f, 0x7a, 0x9b, 0xfd, 0x2a, 0xdb, 0x83, 0x0e, 0xb9, 0x5c, 0xa2, 0x08, 0x0c, 0x90, 0x1a, 0x1f,
	0xa2, 0x97, 0xa4, 0xf8, 0x0a, 0xea, 0x17, 0x38, 0x37, 0x2b, 0x6e, 0x74, 0xf9, 0x17, 0x88, 0xa2,
	0xbf, 0x84, 0xd6, 0xe5, 0x4c, 0xf8, 0xfa, 0x83, 0x86, 0xec, 0x5e, 0x01, 0x4b, 0xc3, 0xb7, 0xf5,
	0xcc, 0xb3, 0x0f, 0xf1, 0xfd, 0xfd, 0xcf, 0x54, 0x3a, 0xfc, 0x55, 0x83, 0xfe, 0x75, 0x5f, 0xfd,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x23, 0x6b, 0xe8, 0x6e, 0xfd, 0x0a, 0x00, 0x00,
}
